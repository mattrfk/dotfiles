#!/usr/bin/env python3

from requests   import get
from bs4        import BeautifulSoup
from sys        import argv
from os         import popen, path
from textwrap   import fill

base_url = "https://www.etymonline.com"
search_url = "/search?q="

cachepath = "~/.etymcache"
cachepath = path.expanduser(cachepath)

cache_enaabled = True

def check_cache(word):
    if not path.exists(cachepath): return False

    definition = ""
    found = False
    with open(cachepath) as f:
        for l in f:

            if not found and l.split(' ')[0].lower() == word.lower():
                definition += "Found a cached definition:\n"
                found = True
                definition += l
            elif found:
                if "------" in l: break
                definition += l
                
    return definition

def put_cache(word, definition):
    """ cache the definition. Return False if the 
        cache file was not updated """ 
    if check_cache(word): return False
    with open(cachepath, "a") as f:
        #TODO: write date here? 
        f.write(definition)
        f.write('-' * 40 + '\n')
        return True

    return False # shouldn't get here.

def list_hist():
    if not path.exists(cachepath): exit()

    prev = ""
    with open(cachepath) as f:
        for l in f:
            if l.startswith("=="):
                print(prev.strip())
            prev = l
    exit()

def get_word():
    if len(argv) < 2:
        return input("Give me a word: ")

    for a in argv[1:]:
        if a.startswith("-"):
            if a.startswith("-h"): list_hist()
    
    return " ".join(argv[1:]) 

def get_soup(url):
    page = get(url)
    return BeautifulSoup(page.text, 'html.parser')

def is_word_class(a):
    """ return true if tag `a` has a class starting with `word` """

    c = a.get('class')
    if c and (c[0].startswith('word__name') or 
              c[0].startswith('word--')):
        return True
    return False

def wprint(s, width=False, indent=0):
    maxwidth = 50
    if not width:
        cols = int(popen('stty size', 'r').read().split()[1])
        width = maxwidth if cols > maxwidth else cols

    ind = ' ' * indent
    text = fill(s, 
                width=width, 
                initial_indent=ind, 
                subsequent_indent=ind)

    return text
    
def get_index(words, word):

    for i,w in enumerate(words):
        if word in w.text:
            return i

    for i,w in enumerate(words):
        print(f"{i+1:>2}) {w.text}")
    
    try:
        sel = input(f"Choose a word ({1}-{len(words)}): ")
    except KeyboardInterrupt: # e.g. C-c
        print()
        exit()

    index = int(sel) - 1
    if index < 0 or index > len(words) - 1:
        print("index out of range")
        return get_index(words)
    else:
        return index

# ask for a word or get it from command line argument 
word = get_word()

d = check_cache(word)
if d:
    print(d)
    exit()

# send request to etymonline and get list of search results
try:
    soup = get_soup(base_url + search_url + word)
except:
    print("Are you connected to the internet?")
    exit()

words = [a for a in soup('a') if is_word_class(a)]

if len(words) < 1:
    print("no words found for", word)
    exit()

# display results and ask which one to define
index = get_index(words, word)

# get definition page for selected word
link = base_url + words[index].get('href')
soup = get_soup(link)

definitions = [d for d in soup('div') if is_word_class(d)]

text = ""
for content in definitions:

    title = [p for p in content.find_all(['h1', 'p']) 
            if is_word_class(p)][0].get_text()

    text += title
    text += '\n'
    text += (len(title) - 1) * '=' # -1 for newline 
    text += '\n'

    for p in content(['p', 'blockquote']):
        if len(p.get_text()) < 1: continue
        if is_word_class(p): continue

        indent = 3 if p.name == 'blockquote' else 0

        text += wprint(p.get_text(), indent=indent)
        text += '\n' * 2

text += link
text += '\n'

print()
print(text)

if cache_enaabled and put_cache(word, text): 
    print("cached", word)
